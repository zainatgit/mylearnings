Aggregations
----------------
Aggregations allow you to perform analysis and insights on your indexed data. They are used to group, filter and compute statistics on your data.
NOTE - We can do aggregation on keyword like integer,float,long etc and not on text
Example :  Find distribution by genre. Find avg rating of movies released in 2010
Three types of aggregations.
--------------------------------
1. Metric aggrregation.
--------------------------------
Metric aggregations calculate metrics (statistics) over a set of documents. They provide insights into the numeric values within the document.
They provide insights into numerical values within a document.
GET /movies/_search
{
	"size" : 0,
	"query" : {
		"match_all" : {}
	},
	"aggs" : {
		"<custom_name_of_aggregation>" : {
			"avg" : {
				"field" : "lengthOfMovie"
			}
		}
	}
}
This will give avg length of movie in , we put size 0 so that in result we don't get all the documents. We can use comma separated aggregations
..
"aggs" : {
		"<custom_name_of_aggregation>" : {
			"avg" : {
				"field" : "lengthOfMovie"
			}
		},
		"<custom_name_of_aggregation>" : {
			"sum" : {
				"field" : "lengthOfMovie"
			}
		}
	}
	
Similary we have min, max, cardinality (distinct) (read about precision threshold), value_count, stats (gives min, max, avg, count etc)
Note : Cardinality calculated is approx, for accurate count we have to use precision_threshold, default value is 3000
--------------------------------
2. Bucket/GroupBy/Nested aggregation.
--------------------------------
Bucket aggregations organize documents into "buckets" or groups based on certain criteria. These criteria can be fields, ranges, date intervals, etc. They help you understand
the distribution of data within various categories. Bucket aggregations as opposed to metric aggregations, can hold sub-aggregations. These sub-aggregations will be aggregated
for the buckets created by their "parent" bucket aggregation. Bucket agg supports nested aggregations. i.e you can write aggregation within an aggregations. It is nested aggs
eg 
{
	"aggs" : {
		"group_by_genre" : {
			"terms" : {
				"field" : "genre.keyword",
				"min_doc_count" : 0, //optional param - show group even if count is 0
				"missing" : "No_genre" //optional param - if some doc has genre field missing then it is bucketed into this
			},
			"aggs" : {
				"my_stats" : {
					"stats" : {
						"field" : "rating"
					}
				}
			}
		}
	}
}
Above query will first group by genre, give count and also give stats of rating like below
{
	"key" : "Crime",
	"doc_count" : 2,
	"my_stats" : {
		"count" : 2,
		"min" : 8.80000
		"max" : 10.0000
		"avg" : 8.50000
		"sum" : 17
	}
},
{
	"key" : "Drama",
	"doc_count" : 3,
	"my_stats" : {
		"count" : 3,
		"min" : 8.80000
		"max" : 10.0000
		"avg" : 8.50000
		"sum" : 17
	}
} ...

Similary like terms we have filter, filters, range, histogram(groups by interval), date_histogram, missing